---
title: "Data Dashboard"
format: html
toc: false
page-layout: full
anchor-sections: false
---

:::{.year-select-wrapper}
**Select Year:**
<select id="year-select-input"></select>
:::

::: {.dashboard-card}
### Closure History

::: {.dashboard-grid}
::: {.dashboard-subcard}
#### Pacific Loggerhead Conservation Area – <span id="closure-year"></span> {.dashboard-title}

<p id="closure-text">Loading...</p>
:::
:::
:::

::: {.dashboard-card}
### Environmental Conditions

::: {.dashboard-grid}
::: {.dashboard-subcard}
#### El Niño Conditions {.dashboard-title}

<div>
<strong>Status:</strong> <span id="elnino-status">Loading...</span><br>
<strong>Synopsis:</strong> <span id="elnino-synopsis">Loading...</span><br>
<strong>Date:</strong> <span id="elnino-date">Loading...</span>
</div>
:::

::: {.dashboard-subcard}
#### Marine Heatwaves {.dashboard-title}

<div>
<strong>Status:</strong> <span id="heatwave-status">Loading...</span><br>
<strong>Forecast Date:</strong> <span id="heatwave-date">Loading...</span><br>
<strong>Period:</strong> <span id="heatwave-period">Loading...</span>
</div>
:::
:::
:::

::: {.dashboard-card}
### TOTAL Bycatch Avoidance Tool

::: {.dashboard-grid}
::: {.dashboard-subcard}
#### TOTAL Timeseries – <span id="indicator-year"></span> {.dashboard-title}

<p id="bycatch-range"></p>
<p>
Temperature Observations To Avoid Loggerhead (TOTAL) values for the Loggerhead Conservation Area.  
An alert is indicated when indicator values (the timeseries) exceed a threshold of <strong>0.77</strong> (red horizontal line).
</p>

<canvas id="indicator-chart" width="600" height="300"></canvas>
:::
:::
:::

::: {.dashboard-card}
### Monthly Sea Surface Maps

::: {.dashboard-grid}
::: {.dashboard-subcard}
#### Sea Surface Temperature {.dashboard-title}

<div id="sst-gallery"></div>
:::

::: {.dashboard-subcard}
#### Sea Surface Temperature Anomaly {.dashboard-title}

<div id="anom-gallery"></div>
:::
:::
:::

::: {.turtlewatch-disclaimer}
The information on this page may be used and redistributed freely, but is not intended for legal use. Neither the data contributors, CoastWatch, NOAA SWFSC, nor any of their employees or contractors, makes any warranty, express or implied, including warranties of merchantability and fitness for a particular purpose, or assumes any legal liability for the accuracy, completeness, or usefulness of this information.
:::

```{=html}
<script src="https://cdn.jsdelivr.net/npm/papaparse@5.4.1/papaparse.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation@1.4.0"></script>
<script>
document.addEventListener("DOMContentLoaded", async function() {
  const yearSelect = document.getElementById("year-select-input");

  // Load history JSONs
  let ensoHist = {};
  let hwHist = {};
  try {
    ensoHist = await (await fetch("data/json/elnino_history.json")).json();
    hwHist   = await (await fetch("data/json/heatwave_history.json")).json();
  } catch(e) { console.error("History JSON missing:", e); }

  // Load loggerhead index (CSV)
  const csvData = await new Promise(resolve => {
    Papa.parse("data/resources/loggerhead_indx.csv", {
      download: true,
      header: true,
      complete: r => resolve(r.data.filter(x => x.dateyrmo))
    });
  });

  // Build year list
  const years = [...new Set(csvData.map(r => r.dateyrmo.split("-")[0]))].sort().reverse();
  years.forEach(y => {
    const opt = document.createElement("option");
    opt.value = y; opt.textContent = y;
    yearSelect.appendChild(opt);
  });

  yearSelect.addEventListener("change", () => updateDashboard(yearSelect.value));
  updateDashboard(years[0]); // init with latest year

  function updateDashboard(year) {
    // --- Closure ---
    const season = csvData.filter(r => {
      const [yr, mo] = r.dateyrmo.split("-");
      return yr === year && ["03","04","05","06","07","08"].includes(mo);
    });
    const mean = season.reduce((s,r) => s+parseFloat(r.indicator||0),0)/season.length;
    const status = mean >= 0.77 ? "Closed" : "Open";
    document.getElementById("closure-year").textContent = year;
    document.getElementById("closure-text").textContent =
      `${status} (mean indicator = ${mean.toFixed(2)})`;

    // --- ENSO ---
    const ensoRec = Object.values(ensoHist).find(r => r.date_print.includes(year)) || null;
    if (ensoRec) {
      document.getElementById("elnino-status").textContent   = ensoRec.status;
      document.getElementById("elnino-synopsis").textContent = ensoRec.synopsis;
      document.getElementById("elnino-date").textContent     = ensoRec.date_print;
    } else {
      document.getElementById("elnino-status").textContent = "N/A";
      document.getElementById("elnino-synopsis").textContent = "";
      document.getElementById("elnino-date").textContent = "";
    }

    // --- Heatwave ---
    const hwRec = Object.values(hwHist).find(r => r.heat_date.includes(year)) || null;
    if (hwRec) {
      document.getElementById("heatwave-status").textContent = hwRec.heat_status;
      document.getElementById("heatwave-date").textContent   = hwRec.heat_date;
      document.getElementById("heatwave-period").textContent = hwRec.heat_period;
    } else {
      document.getElementById("heatwave-status").textContent = "N/A";
      document.getElementById("heatwave-date").textContent = "";
      document.getElementById("heatwave-period").textContent = "";
    }

    // --- TOTAL indicator timeseries ---
    const yearData = csvData.filter(r => r.dateyrmo.startsWith(year));
    const months = yearData.map(r => r.dateyrmo);
    const values = yearData.map(r => parseFloat(r.indicator || 0));

    document.getElementById("indicator-year").textContent = year;
    document.getElementById("bycatch-range").textContent = `January – December ${year}`;

    const ctx = document.getElementById("indicator-chart").getContext("2d");
    if (window.indChart) window.indChart.destroy();

    window.indChart = new Chart(ctx, {
      type: "scatter",
      data: {
        labels: months,
        datasets: [{
          label: "Indicator",
          data: values.map((v, i) => ({ x: i+1, y: v })),
          pointBackgroundColor: values.map(v => v >= 0.77 ? "red" : "black"),
          pointBorderColor: values.map(v => v >= 0.77 ? "red" : "black"),
          showLine: false,
        }]
      },
      options: {
        responsive: true,
        scales: {
          x: {
            type: "linear",
            min: 1,
            max: 12,
            ticks: {
              stepSize: 1,
              callback: (val) => {
                const labels = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
                return labels[val-1];
              }
            },
            title: { display: true, text: "Month" }
          },
          y: {
            title: { display: true, text: "Indicator" }
          }
        },
        plugins: {
          legend: { display: false },
          annotation: {
            annotations: {
              threshold: {
                type: "line",
                yMin: 0.77,
                yMax: 0.77,
                borderColor: "red",
                borderWidth: 2,
                label: {
                  content: "Threshold 0.77",
                  enabled: true,
                  position: "end"
                }
              }
            }
          }
        }
      },
      plugins: [Chart.registry.getPlugin("annotation")]
    });

    // --- Maps gallery ---
    const monthsList = ["03","04","05","06","07","08"];
    const sstGallery = document.getElementById("sst-gallery");
    const anomGallery = document.getElementById("anom-gallery");
    sstGallery.innerHTML = "";
    anomGallery.innerHTML = "";
    monthsList.forEach(mo => {
      const sstImg = `data/images/sst_${year}${mo}16.png`;
      const anomImg = `data/images/anom_${year}${mo}16.png`;
      sstGallery.innerHTML += `<figure><img src="${sstImg}" style="max-width:100%;"><figcaption>${year}-${mo} SST</figcaption></figure>`;
      anomGallery.innerHTML += `<figure><img src="${anomImg}" style="max-width:100%;"><figcaption>${year}-${mo} Anomaly</figcaption></figure>`;
    });
  }
});
</script>