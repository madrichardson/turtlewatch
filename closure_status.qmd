---
title: "Conservation Area Status"
format: html
toc: false
page-layout: full
anchor-sections: false
---
::: {.status-card}

<div class="status-banner success">
  <span class="status-text">No closure in effect</span>
  <div class="status-date"></div>
</div>
  
NMFS has reopened the Pacific Loggerhead Conservation Area (LCA) to fishing with drift gillnets (DGN). The LCA had been closed to DGN since June 1, 2024. *(Posted 8/1/2024)*  

<small>
*[Closure status provided by NOAA Fisheries West Coast Regional Office](https://www.westcoast.fisheries.noaa.gov/)*
</small>

:::

::: {.status-card}
### Environmental Conditions

::: {.status-grid}


::: {.status-subcard}

#### El Niño: <span id="nino-status">Loading...</span> {.subcard-title}
**Updated:** <span id="nino-date">Loading...</span>

**Forecast:**
<span id="nino-synopsis">Loading ENSO synopsis...</span>

<small>*<a id="nino-link" href="https://www.cpc.ncep.noaa.gov/products/analysis_monitoring/enso_advisory/ensodisc.shtml" target="_blank">NOAA’s Climate Prediction Center</a>*</small>

---

#### Marine Heatwave (MHW) {.subcard-title}
**Forecast period:** <span id="heat-period">Loading...</span>

**<span id="heat-date">Loading...</span>**
<span id="heat-status">Loading Marine Heatwave data...</span>


<small>*<a id="heat-link" href="https://psl.noaa.gov/marine-heatwaves/#report" target="_blank">NOAA’s Marine Heatwave Forecast</a>*</small>

:::

::: {.status-subcard}
#### Closure Area Sea Temperature

<div class="unit-toggle">
<label><input type="radio" name="temp-unit" value="C" checked> °C</label>
<label><input type="radio" name="temp-unit" value="F"> °F</label>
</div>

<div id="sst-table-container">
  <p>Loading temperature data...</p>
</div>

<small>
Recent and historical monthly sea surface temperatures within the Loggerhead sea turtle conservation area.  
Dataset: [GHRSST MUR](https://coastwatch.pfeg.noaa.gov/erddap/search/index.html?page=1&itemsPerPage=1000&searchFor=mur+sst)
</small>

![Map of the Pacific Loggerhead Conservation Area (Loggerhead Closure). Map copyright: NOAA Fisheries](images/loggerhead_conservation.png){.lightbox width="60%"}

:::


:::
:::

::: {.status-card}
### TOTAL Bycatch Avoidance Tool

::: {.status-grid}


::: {.status-subcard}

#### TOTAL Time Series {.subcard-title}
:::{.status-info}
- **Most recent forecast:** <span id="total-fcdate">Loading...</span>
- **Status:** <span id="total-status">Loading...</span>
- **Indicator value:** <span id="total-index">Loading...</span>
- **Updated:** <span id="total-updated">Loading...</span>
:::

This year’s **Temperature Observations To Avoid Loggerhead (TOTAL)** values for the Loggerhead Conservation Area. An alert is indicated when indicator values (the timeseries) exceed a threshold of **0.77 (red horizontal line)**.

![](https://coastwatch.pfeg.noaa.gov/elnino/dash/indicator_latest.png){fig-align="center"}
:::

:::
:::

::: {.status-card}
### Monthly Sea Surface Maps

::: {.status-grid}

::: {.status-subcard}
#### Sea Surface Temperature <span id="sst-year">2025</span> {.subcard-title}

:::{.sst-slider}
[‹ Previous]{.prev}
[Next ›]{.next}

![](data/images/sst_placeholder.png){#sst-dash-image}
:::

Monthly mean sea surface temperature off Southern California. The Pacific Loggerhead Conservation Area is located within the black lines and the coast. Use arrows to view the last six months of measurements. 

Dataset: [GHRSST MUR](https://coastwatch.pfeg.noaa.gov/erddap/griddap/jplMURSST41mday.graph)

:::

::: {.status-subcard}
#### Sea Surface Temperature Anomaly <span id="sst-year">2025</span> {.subcard-title}

:::{.anom-slider}
[‹ Previous]{.prev}
[Next ›]{.next}

![](data/images/anom_placeholder.png){#anom-image}
:::
Monthly mean surface temperature anomaly (deviation from the average temperature) off Southern California. The Pacific Loggerhead Conservation Area is located within the black lines and the coast. Use arrows to view the last six months of measurements.

Dataset: [GHRSST MUR](https://coastwatch.pfeg.noaa.gov/erddap/griddap/jplMURSST41anommday.graph)

:::
:::

:::

::: {.turtlewatch-disclaimer}
The information on this page may be used and redistributed freely, but is not intended for legal use. Neither the data contributors, CoastWatch, NOAA SWFSC, nor any of their employees or contractors, makes any warranty, express or implied, including warranties of merchantability and fitness for a particular purpose, or assumes any legal liability for the accuracy, completeness, or usefulness of this information. For official information about El Niño/La Niña contact [NOAA's Climate Prediction Center](https://www.cpc.ncep.noaa.gov/products/analysis_monitoring/enso_advisory/ensodisc.shtml). For official information about regulation of the drift gillnet (DGN) fishery contact [NOAA Fisheries West Coast Regional Office](https://www.westcoast.fisheries.noaa.gov/).
:::




<script>
document.addEventListener("DOMContentLoaded", () => {

  // === Load El Niño JSON ===
  fetch("data/json/elnino_last.json")
    .then(resp => resp.json())
    .then(data => {
      const ninoStatus = document.getElementById("nino-status");
      const ninoDate = document.getElementById("nino-date");
      const ninoSynopsis = document.getElementById("nino-synopsis");
      if (ninoStatus) ninoStatus.textContent = data.status || "Not available";
      if (ninoDate) ninoDate.textContent = data.date_print || "Not available";
      if (ninoSynopsis) ninoSynopsis.textContent = data.synopsis?.trim() || "Not available";
    })
    .catch(err => console.error("Error loading El Niño JSON:", err));

  // === Load Marine Heatwave JSON ===
  fetch("data/json/heatwave.json")
    .then(resp => resp.json())
    .then(data => {
      const hwPeriod = document.getElementById("heat-period");
      const hwDate = document.getElementById("heat-date");
      const hwStatus = document.getElementById("heat-status");
      if (hwPeriod) hwPeriod.textContent = data.heat_period || "Not available";
      if (hwDate) hwDate.textContent = data.heat_date || "Not available";
      if (hwStatus) hwStatus.textContent = data.heat_status?.trim() || "Not available";
    })
    .catch(err => console.error("Error loading Heatwave JSON:", err));

  // === Load and render SST Table ===
  const container = document.getElementById("sst-table-container");
  if (container) {
    fetch("data/json/latest.json")
      .then(resp => resp.json())
      .then(data => {
        const keys = Object.keys(data).sort((a, b) => Number(b.slice(1)) - Number(a.slice(1)));
        const months = keys.map(k => data[k].month || "");
        const sstVals = keys.map(k => parseFloat(data[k].sst));
        const anomVals = keys.map(k => parseFloat(data[k].anom));

        const table = document.createElement("table");
        table.className = "table table-condensed table-striped";

        // Header
        const thead = document.createElement("thead");
        const headerRow = document.createElement("tr");
        headerRow.appendChild(document.createElement("th"));
        months.forEach(m => {
          const th = document.createElement("th");
          th.textContent = m;
          headerRow.appendChild(th);
        });
        thead.appendChild(headerRow);
        table.appendChild(thead);

        // Body
        const tbody = document.createElement("tbody");

        const tempRow = document.createElement("tr");
        const tempLabel = document.createElement("td");
        tempLabel.textContent = "Temperature";
        tempRow.appendChild(tempLabel);
        sstVals.forEach(v => {
          const td = document.createElement("td");
          td.textContent = v.toFixed(1);
          tempRow.appendChild(td);
        });
        tbody.appendChild(tempRow);

        const anomRow = document.createElement("tr");
        const anomLabel = document.createElement("td");
        anomLabel.textContent = "Anomaly";
        anomRow.appendChild(anomLabel);
        anomVals.forEach(v => {
          const td = document.createElement("td");
          td.textContent = v.toFixed(1);
          td.style.fontWeight = "bold";
          td.style.color = v > 0 ? "red" : v < 0 ? "blue" : "black";
          anomRow.appendChild(td);
        });
        tbody.appendChild(anomRow);

        table.appendChild(tbody);
        container.innerHTML = "";
        container.appendChild(table);

        // °C/°F toggle logic
        const radios = document.querySelectorAll("input[name='temp-unit']");
        radios.forEach(radio => {
          radio.addEventListener("change", () => {
            const temps = table.querySelectorAll("tbody tr:first-child td:not(:first-child)");
            const anoms = table.querySelectorAll("tbody tr:last-child td:not(:first-child)");

            temps.forEach((td, i) => {
              const c = sstVals[i];
              td.textContent = radio.value === "C" ? c.toFixed(1) : (c * 9/5 + 32).toFixed(1);
            });
            anoms.forEach((td, i) => {
              const c = anomVals[i];
              td.textContent = radio.value === "C" ? c.toFixed(1) : (c * 9/5).toFixed(1);
            });
          });
        });
      })
      .catch(err => {
        console.error("Error loading SST table JSON:", err);
        container.innerHTML = "<p style='color:red;'>Error loading temperature data.</p>";
      });
  }

  // === Load TOTAL Loggerhead Index JSON ===
  fetch("data/json/web_data.json")
    .then(resp => resp.json())
    .then(data => {
      const fcEl = document.getElementById("total-fcdate");
      const stEl = document.getElementById("total-status");
      const idxEl = document.getElementById("total-index");
      const updEl = document.getElementById("total-updated");

      if (fcEl) fcEl.textContent = data.fc_date || "Not available";
      if (stEl) stEl.textContent = data.alert || "Not available";
      if (idxEl) idxEl.textContent = data.new_index || "Not available";
      if (updEl) updEl.textContent = data.update_date || "Not available";
    })
    .catch(err => console.error("Error loading TOTAL index JSON:", err));

  // === SST SLIDER (local data/images/) ===
  const sstImgEl = document.getElementById("sst-dash-image");
  const sstPrevBtn = document.querySelector(".sst-slider .prev");
  const sstNextBtn = document.querySelector(".sst-slider .next");
  const sstYearTitle = document.getElementById("sst-year");

  const year = new Date().getFullYear();
  const months = ["03","04","05","06","07","08"];
  const sstImages = months.map(m => `data/images/sst_${year}${m}16.png`);
  let sstIndex = sstImages.length - 1;

  function updateSST() {
    sstImgEl.src = sstImages[sstIndex];
    sstPrevBtn.style.opacity = sstIndex === 0 ? 0.5 : 1;
    sstNextBtn.style.opacity = sstIndex === sstImages.length - 1 ? 0.5 : 1;
  }

  if (sstPrevBtn && sstNextBtn) {
    sstPrevBtn.addEventListener("click", e => {
      e.preventDefault();
      if (sstIndex > 0) sstIndex--;
      updateSST();
    });
    sstNextBtn.addEventListener("click", e => {
      e.preventDefault();
      if (sstIndex < sstImages.length - 1) sstIndex++;
      updateSST();
    });
  }
  updateSST();

  // === ANOMALY SLIDER (local data/images/) ===
  const anomImgEl = document.getElementById("anom-image");
  const anomPrevBtn = document.querySelector(".anom-slider .prev");
  const anomNextBtn = document.querySelector(".anom-slider .next");
  const anomImages = months.map(m => `data/images/anom_${year}${m}16.png`);
  let anomIndex = anomImages.length - 1;

  function updateAnom() {
    anomImgEl.src = anomImages[anomIndex];
    anomPrevBtn.style.opacity = anomIndex === 0 ? 0.5 : 1;
    anomNextBtn.style.opacity = anomIndex === anomImages.length - 1 ? 0.5 : 1;
  }

  if (anomPrevBtn && anomNextBtn) {
    anomPrevBtn.addEventListener("click", e => {
      e.preventDefault();
      if (anomIndex > 0) anomIndex--;
      updateAnom();
    });
    anomNextBtn.addEventListener("click", e => {
      e.preventDefault();
      if (anomIndex < anomImages.length - 1) anomIndex++;
      updateAnom();
    });
  }
  updateAnom();

  // === Date update (top banner) ===
  const dateEl = document.querySelector(".status-date");
  if (dateEl) {
    const today = new Date();
    const options = { year: 'numeric', month: 'long', day: 'numeric' };
    dateEl.textContent = today.toLocaleDateString(undefined, options);
  }

});
</script>
