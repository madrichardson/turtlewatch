---
title: "Conservation Area Status"
format: html
toc: false
page-layout: full
anchor-sections: false
---
::: {.status-card}

<div class="status-banner success">
  <span class="status-text">No closure in effect</span>
  <div class="status-date"></div>
</div>
  
NMFS has reopened the Pacific Loggerhead Conservation Area (LCA) to fishing with drift gillnets (DGN). The LCA had been closed to DGN since June 1, 2024. *(Posted 8/1/2024)*  

<small>
*[Closure status provided by NOAA Fisheries West Coast Regional Office](https://www.westcoast.fisheries.noaa.gov/)*
</small>

:::

::: {.status-card}
### Environmental Conditions

::: {.status-grid}


::: {.status-subcard}

#### El Niño: <span id="nino-status">Loading...</span> {.subcard-title}
*<span id="nino-synopsis">Loading ENSO synopsis...</span>*

<small>*<a id="nino-link" href="https://www.cpc.ncep.noaa.gov/products/analysis_monitoring/enso_advisory/ensodisc.shtml" target="_blank">NOAA’s Climate Prediction Center</a>*</small>

---

#### Marine Heatwave (MHW) {.subcard-title}
*Forecast period: <span id="heat-period">Loading...</span>*

**<span id="heat-region">Loading...</span>**
<span id="heat-status">Loading Marine Heatwave data...</span>

<small>*[NOAA’s Marine Heatwave Forecast](https://psl.noaa.gov/marine-heatwaves/#report)*</small>

<small>*<a id="heat-link" href="https://psl.noaa.gov/marine-heatwaves/#report" target="_blank">NOAA’s Marine Heatwave Forecast</a>*</small>

:::

::: {.status-subcard}
#### Closure Area Sea Temperature

<div class="unit-toggle">
<label><input type="radio" name="temp-unit" value="C" checked> °C</label>
<label><input type="radio" name="temp-unit" value="F"> °F</label>
</div>

<div id="sst-table-container">
  <p>Loading temperature data...</p>
</div>

<small>
Recent and historical monthly sea surface temperatures within the Loggerhead sea turtle conservation area.  
Dataset: [GHRSST MUR](https://coastwatch.pfeg.noaa.gov/erddap/search/index.html?page=1&itemsPerPage=1000&searchFor=mur+sst)
</small>

![Map of the Pacific Loggerhead Conservation Area (Loggerhead Closure). Map copyright: NOAA Fisheries](images/loggerhead_conservation.png){.lightbox width="60%"}

:::


:::
:::

::: {.status-card}
### TOTAL Bycatch Avoidance Tool

::: {.status-grid}


::: {.status-subcard}

#### TOTAL Time Series {.subcard-title}
:::{.status-info}
- **Most recent forecast:** September 2025  
- **Status:** No Alert  
- **Indicator value:** 0.11  
- **Updated:** 04 Sep 2025  
:::

This year’s **Temperature Observations To Avoid Loggerhead (TOTAL)** values for the Loggerhead Conservation Area. An alert is indicated when indicator values (the timeseries) exceed a threshold of **0.77 (red horizontal line)**.

![](https://coastwatch.pfeg.noaa.gov/elnino/dash/indicator_latest.png){fig-align="center"}
:::

:::
:::

::: {.status-card}
### Monthly Sea Surface Maps

::: {.status-grid}

::: {.status-subcard}
#### Sea Surface Temperature {.subcard-title}

:::{.sst-slider}
[‹ Previous]{.prev}
[Next ›]{.next}

![](https://coastwatch.pfeg.noaa.gov/elnino/images_tw/sst_0.png){#sst-image}
:::

Monthly mean sea surface temperature off Southern California. The Pacific Loggerhead Conservation Area is located within the black lines and the coast. Use arrows to view the last six months of measurements. 

Dataset: [GHRSST MUR](https://coastwatch.pfeg.noaa.gov/erddap/griddap/jplMURSST41mday.graph)

:::

::: {.status-subcard}
#### Sea Surface Temperature Anomaly {.subcard-title}

:::{.anom-slider}
[‹ Previous]{.prev}
[Next ›]{.next}

![](https://coastwatch.pfeg.noaa.gov/elnino/images_tw/anom_0.png){#anom-image}
:::
Monthly mean surface temperature anomaly (deviation from the average temperature) off Southern California. The Pacific Loggerhead Conservation Area is located within the black lines and the coast. Use arrows to view the last six months of measurements.

Dataset: [GHRSST MUR](https://coastwatch.pfeg.noaa.gov/erddap/griddap/jplMURSST41anommday.graph)

:::
:::

:::

::: {.turtlewatch-disclaimer}
The information on this page may be used and redistributed freely, but is not intended for legal use. Neither the data contributors, CoastWatch, NOAA SWFSC, nor any of their employees or contractors, makes any warranty, express or implied, including warranties of merchantability and fitness for a particular purpose, or assumes any legal liability for the accuracy, completeness, or usefulness of this information. For official information about El Niño/La Niña contact [NOAA's Climate Prediction Center](https://www.cpc.ncep.noaa.gov/products/analysis_monitoring/enso_advisory/ensodisc.shtml). For official information about regulation of the drift gillnet (DGN) fishery contact [NOAA Fisheries West Coast Regional Office](https://www.westcoast.fisheries.noaa.gov/).
:::















<script>
document.addEventListener("DOMContentLoaded", () => {
  const radios = document.querySelectorAll("input[name='temp-unit']");
  const table = document.querySelector(".status-subcard table");

  if (!table) return; // safety check

  const rows = table.querySelectorAll("tbody tr");
  const tempCells = rows[0].querySelectorAll("td");
  const anomalyCells = rows[1].querySelectorAll("td");

  // Store Celsius baseline values (skip labels in col[0])
  const celsiusTemps = Array.from(tempCells).slice(1).map(td => parseFloat(td.textContent));
  const celsiusAnoms = Array.from(anomalyCells).slice(1).map(td => parseFloat(td.textContent));

  // Add initial anomaly coloring
  Array.from(anomalyCells).slice(1).forEach((td, i) => {
    const val = celsiusAnoms[i];
    td.classList.add(val >= 0 ? "positive" : "negative");
  });

  // Toggle conversion
  radios.forEach(radio => {
    radio.addEventListener("change", () => {
      if (radio.checked) {
        Array.from(tempCells).slice(1).forEach((td, i) => {
          if (radio.value === "C") {
            td.textContent = celsiusTemps[i].toFixed(1);
          } else {
            const tempF = (celsiusTemps[i] * 9/5) + 32;
            td.textContent = tempF.toFixed(1);
          }
        });

        Array.from(anomalyCells).slice(1).forEach((td, i) => {
          if (radio.value === "C") {
            td.textContent = celsiusAnoms[i].toFixed(1);
          } else {
            const anomF = celsiusAnoms[i] * 9/5; // convert delta
            td.textContent = anomF.toFixed(1);
          }
        });
      }
    });
  });

  // === NEW: Load El Niño JSON ===
  fetch("data/json/elnino_last.json")
    .then(resp => resp.json())
    .then(data => {
      const ninoStatus = document.getElementById("nino-status");
      const ninoDate = document.getElementById("nino-date");
      const ninoSynopsis = document.getElementById("nino-synopsis");
      if (ninoStatus) ninoStatus.textContent = data.status || "Not available";
      if (ninoDate) ninoDate.textContent = `Updated: ${data.date_print || "Not available"}`;
      if (ninoSynopsis) ninoSynopsis.textContent = data.synopsis || "Not available";
    })
    .catch(err => console.error("Error loading El Niño JSON:", err));

  // === NEW: Load Marine Heatwave JSON ===
  fetch("data/json/heatwave.json")
    .then(resp => resp.json())
    .then(data => {
      const hwPeriod = document.getElementById("heat-period");
      const hwRegion = document.getElementById("heat-region");
      const hwStatus = document.getElementById("heat-status");
      if (hwPeriod) hwPeriod.textContent = data.heat_period || "Not available";
      if (hwRegion) hwRegion.textContent = data.heat_region || "Not available";
      if (hwStatus) hwStatus.textContent = data.heat_status || "Not available";
    })
    .catch(err => console.error("Error loading Heatwave JSON:", err));
});
</script>

<script>
document.addEventListener("DOMContentLoaded", () => {
  const images = [
    "https://coastwatch.pfeg.noaa.gov/elnino/images_tw/sst_0.png",
    "https://coastwatch.pfeg.noaa.gov/elnino/images_tw/sst_1.png",
    "https://coastwatch.pfeg.noaa.gov/elnino/images_tw/sst_2.png",
    "https://coastwatch.pfeg.noaa.gov/elnino/images_tw/sst_3.png",
    "https://coastwatch.pfeg.noaa.gov/elnino/images_tw/sst_4.png",
    "https://coastwatch.pfeg.noaa.gov/elnino/images_tw/sst_5.png"
  ];

  let index = 0;
  const imgEl = document.getElementById("sst-image");
  const prevBtn = document.querySelector(".sst-slider .prev");
  const nextBtn = document.querySelector(".sst-slider .next");

  function updateImage() {
    imgEl.src = images[index];
    prevBtn.style.opacity = index === 0 ? 0.5 : 1;
    nextBtn.style.opacity = index === images.length - 1 ? 0.5 : 1;
  }

  prevBtn.addEventListener("click", (e) => {
    e.preventDefault();
    if (index > 0) {
      index--;
      updateImage();
    }
  });

  nextBtn.addEventListener("click", (e) => {
    e.preventDefault();
    if (index < images.length - 1) {
      index++;
      updateImage();
    }
  });

  updateImage();
});
</script>

<script>
document.addEventListener("DOMContentLoaded", () => {
  const anomImages = [
    "https://coastwatch.pfeg.noaa.gov/elnino/images_tw/anom_0.png",
    "https://coastwatch.pfeg.noaa.gov/elnino/images_tw/anom_1.png",
    "https://coastwatch.pfeg.noaa.gov/elnino/images_tw/anom_2.png",
    "https://coastwatch.pfeg.noaa.gov/elnino/images_tw/anom_3.png",
    "https://coastwatch.pfeg.noaa.gov/elnino/images_tw/anom_4.png",
    "https://coastwatch.pfeg.noaa.gov/elnino/images_tw/anom_5.png"
  ];

  let anomIndex = 0;
  const anomImgEl = document.getElementById("anom-image");
  const anomPrevBtn = document.querySelector(".anom-slider .prev");
  const anomNextBtn = document.querySelector(".anom-slider .next");

  function updateAnomImage() {
    anomImgEl.src = anomImages[anomIndex];
    anomPrevBtn.style.opacity = anomIndex === 0 ? 0.5 : 1;
    anomNextBtn.style.opacity = anomIndex === anomImages.length - 1 ? 0.5 : 1;
  }

  anomPrevBtn.addEventListener("click", (e) => {
    e.preventDefault();
    if (anomIndex > 0) {
      anomIndex--;
      updateAnomImage();
    }
  });

  anomNextBtn.addEventListener("click", (e) => {
    e.preventDefault();
    if (anomIndex < anomImages.length - 1) {
      anomIndex++;
      updateAnomImage();
    }
  });

  updateAnomImage();
});
</script>

<script>
document.addEventListener("DOMContentLoaded", () => {
  const dateEl = document.querySelector(".status-date");
  if (dateEl) {
    const today = new Date();
    const options = { year: 'numeric', month: 'long', day: 'numeric' };
    dateEl.textContent = today.toLocaleDateString(undefined, options);
  }
});
</script>




<script>
document.addEventListener("DOMContentLoaded", () => {
  const container = document.getElementById("sst-table-container");
  if (!container) return;

  fetch("data/json/latest.json")
    .then(response => response.json())
    .then(data => {
      // Sort keys (latest to oldest)
      const keys = Object.keys(data).sort((a, b) => Number(b.slice(1)) - Number(a.slice(1)));

      // Extract month, SST, and anomaly data
      const months = keys.map(k => data[k].month || "");
      const sstVals = keys.map(k => parseFloat(data[k].sst));
      const anomVals = keys.map(k => parseFloat(data[k].anom));

      // === Build table dynamically (DOM-safe, no raw HTML) ===
      const table = document.createElement("table");
      table.className = "table table-condensed table-striped";

      // Header
      const thead = document.createElement("thead");
      const headerRow = document.createElement("tr");
      headerRow.appendChild(document.createElement("th")); // empty corner cell
      months.forEach(m => {
        const th = document.createElement("th");
        th.textContent = m;
        headerRow.appendChild(th);
      });
      thead.appendChild(headerRow);
      table.appendChild(thead);

      // Body
      const tbody = document.createElement("tbody");

      // Temperature row
      const tempRow = document.createElement("tr");
      const tempLabel = document.createElement("td");
      tempLabel.textContent = "Temperature";
      tempRow.appendChild(tempLabel);
      sstVals.forEach(v => {
        const td = document.createElement("td");
        td.textContent = v.toFixed(1);
        tempRow.appendChild(td);
      });
      tbody.appendChild(tempRow);

      // Anomaly row
      const anomRow = document.createElement("tr");
      const anomLabel = document.createElement("td");
      anomLabel.textContent = "Anomaly";
      anomRow.appendChild(anomLabel);
      anomVals.forEach(v => {
        const td = document.createElement("td");
        td.textContent = v.toFixed(1);
        td.style.fontWeight = "bold";
        td.style.color = v > 0 ? "red" : v < 0 ? "blue" : "black";
        anomRow.appendChild(td);
      });
      tbody.appendChild(anomRow);

      table.appendChild(tbody);
      container.innerHTML = ""; // clear loading text
      container.appendChild(table);

      // === Unit toggle logic ===
      const radios = document.querySelectorAll("input[name='temp-unit']");
      radios.forEach(radio => {
        radio.addEventListener("change", () => {
          const temps = table.querySelectorAll("tbody tr:first-child td:not(:first-child)");
          const anoms = table.querySelectorAll("tbody tr:last-child td:not(:first-child)");

          temps.forEach((td, i) => {
            const c = sstVals[i];
            td.textContent = radio.value === "C" ? c.toFixed(1) : (c * 9/5 + 32).toFixed(1);
          });

          anoms.forEach((td, i) => {
            const c = anomVals[i];
            td.textContent = radio.value === "C" ? c.toFixed(1) : (c * 9/5).toFixed(1);
          });
        });
      });
    })
    .catch(err => {
      console.error("Error loading latest.json:", err);
      container.innerHTML = `<p style="color:red;">Error loading temperature data.</p>`;
    });
});
</script>
